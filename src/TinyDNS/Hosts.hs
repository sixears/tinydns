{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE Rank2Types        #-}
{-# LANGUAGE TupleSections     #-}
{-# LANGUAGE UnicodeSyntax     #-}

module TinyDNS.Hosts
  ( {- | integration of tinydns cmds with HostsDB -}
    mkAliasCmds, mkData, mkDataHosts, mkMxCmds, mkNSCmds
  )
where

-- base --------------------------------

import Control.Monad  ( foldM, forM, mapM, return )
import Data.Function  ( ($), flip )

-- domainnames -------------------------

import DomainNames.Error.DomainError  ( AsDomainError )
import DomainNames.Hostname           ( (<..>) )

-- fpath -------------------------------

import FPath.Error.FPathError  ( AsFPathError )

-- hostsdb -----------------------------

import HostsDB.Error.HostsError  ( AsHostsError )
import HostsDB.Host              ( hname, ipv4 )
import HostsDB.Hosts             ( HasHosts
                                 , aliasHosts, dnsServers, hosts, hostIPs
                                 , hostIPv4
                                 , inAddr, lookupHost, mailServers, subDomain
                                 )

-- lens --------------------------------

import Control.Lens.Getter   ( view )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO   ( MonadIO )

-- more-unicode ------------------------

import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Lens     ( (‚ä£) )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Monoid   ( —Ñ )
import Data.MoreUnicode.Text     ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( MonadError )
import Control.Monad.Reader  ( MonadReader, asks, runReaderT )
import Control.Monad.Trans   ( lift )

-- proclib -----------------------------

import ProcLib.CommonOpt.DryRun       ( HasDryRunLevel )
import ProcLib.CommonOpt.Verbose      ( HasVerboseLevel )
import ProcLib.Error.CreateProcError  ( AsCreateProcError )
import ProcLib.Error.ExecError        ( AsExecError )
import ProcLib.Process                ( doProcIO )
import ProcLib.Types.ProcIO           ( ProcIO )

-- unordered-containers ----------------

import qualified  Data.HashMap.Strict  as  HashMap

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import TinyDNS.Edit                  ( addAliases, addHosts, addMx, addNSen )
import TinyDNS.Types.Clean           ( HasClean( clean ) )
import TinyDNS.Types.RuntimeContext  ( RuntimeContext( RuntimeContext ) )
import TinyDNS.Types.TinyDNSData     ( TinyDNSData )

--------------------------------------------------------------------------------

mkNSCmds ‚à∑ (AsCreateProcError Œµ, AsExecError Œµ, AsHostsError Œµ, AsIOError Œµ,
            AsFPathError Œµ,
            MonadIO Œº, HasClean Œ±, HasHosts Œ±, MonadReader Œ± Œº) ‚áí
           TinyDNSData ‚Üí ProcIO Œµ Œº TinyDNSData
mkNSCmds tinydnsdata = do
  hs  ‚Üê lift (asks $ view hosts)
  ips ‚Üê lift $ mapM (hostIPv4 hs) (hs ‚ä£ dnsServers)
  addNSen [hs ‚ä£ subDomain, hs ‚ä£ inAddr] ips tinydnsdata

----------------------------------------

mkAliasCmds ‚à∑ (AsCreateProcError Œµ, AsExecError Œµ, AsFPathError Œµ,
               AsDomainError Œµ, AsHostsError Œµ, AsIOError Œµ,
               MonadIO Œº, HasClean Œ±, HasHosts Œ±, MonadReader Œ± Œº) ‚áí
              TinyDNSData ‚Üí ProcIO Œµ Œº TinyDNSData
mkAliasCmds t = do
  hs ‚Üê lift (asks $ view hosts)
  as ‚Üê lift (HashMap.toList ‚ä≥ aliasHosts hs)
  let aliasHostIP (l,h) = (,h ‚ä£ ipv4) ‚ä≥ l <..> (hs ‚ä£ subDomain)
  aliases ‚Üê lift $ forM as aliasHostIP
  addAliases aliases t

----------------------------------------

mkMxCmds ‚à∑ (AsExecError Œµ, AsCreateProcError Œµ, AsHostsError Œµ, AsIOError Œµ,
            AsFPathError Œµ,
            MonadIO Œº, HasClean Œ±, HasHosts Œ±, MonadReader Œ± Œº) ‚áí
           TinyDNSData ‚Üí ProcIO Œµ Œº TinyDNSData

mkMxCmds tinydnsdata = do
  hs ‚Üê lift (asks $ view hosts)
  let go t h = do mx ‚Üê lift $ lookupHost hs h
                  addMx (mx ‚ä£ hname) (mx ‚ä£ ipv4) t
  foldM (\ t h ‚Üí go t h) tinydnsdata (hs ‚ä£ mailServers)

----------------------------------------

mkData ‚à∑ (AsHostsError Œµ, AsExecError Œµ, AsCreateProcError Œµ, AsFPathError Œµ,
          AsDomainError Œµ, AsIOError Œµ,
          MonadIO Œº, HasClean Œ±, HasHosts Œ±, MonadReader Œ± Œº) ‚áí

         ProcIO Œµ Œº (TinyDNSData, [ùïã])

mkData = do
  hs ‚Üê lift $ asks (view hosts)
  let (hostList,es) = hostIPs hs

  tinydnsdata ‚Üê mkNSCmds —Ñ ‚â´ addHosts hostList ‚â´ mkAliasCmds ‚â´ mkMxCmds

  return (tinydnsdata,es)

----------------------------------------

mkDataHosts ‚à∑ ‚àÄ Œµ œÅ œÉ Œ∏ œÖ ŒΩ Œº .
              (MonadIO Œº, HasDryRunLevel œÖ Œ∏, HasVerboseLevel ŒΩ Œ∏,
               AsIOError Œµ, AsDomainError Œµ, AsFPathError Œµ,
               AsCreateProcError Œµ, AsExecError Œµ, AsHostsError Œµ,
               MonadError Œµ Œº,
               HasClean œÅ, HasHosts œÉ) ‚áí
              œÅ ‚Üí œÉ ‚Üí Œ∏ ‚Üí Œº (TinyDNSData,[ùïã])
mkDataHosts c hs o = let rContext = RuntimeContext (c ‚ä£ clean) (hs ‚ä£ hosts)
                      in flip runReaderT rContext $ doProcIO o mkData

-- that's all, folks! ----------------------------------------------------------
